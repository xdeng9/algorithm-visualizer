{"version":3,"sources":["header/Header.js","grid/grid.js","graph/util.js","graph/Dijkstra.js","graph/aStar_util.js","graph/AStar.js","graph/Maze.js","queen/Queen.js","sort/Bars.jsx","sort/sortUtil.js","sort/QuickSort.js","sort/MergeSort.js","home/Home.js","App.js","index.js"],"names":["Header","className","to","id","Grid","props","rows","cols","startSelected","endSelected","lastPos","state","grid","start","end","isMousePressed","handleMouseDown","bind","handleMouseUp","handleReset","handleOutbounds","handleTips","this","setState","createGrid","style","i","push","j","key","onMouseDown","onMouseUp","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","e","preventDefault","pos","currentTarget","split","parseInt","parseIdToPos","cell","document","getElementById","isStartOrEnd","classList","add","remove","getStartElement","getEndElement","contains","parsePosToId","map","el","querySelector","disableEvents","clearGraph","algoType","res","dijkstraSearch","length","alert","enableEvents","time","shortestPath","setTimeout","path","aStarSearch","pop","tipsModal","closeBtn","display","onclick","onClick","animate","React","Component","PriorityQueue","items","size","Node","k","d","prototype","getLeftChildIndex","parentIndex","getRightChildIndex","getParentIndex","childIndex","hasLeftChild","index","hasRightChild","hasParent","leftChild","rightChild","parent","swap","idx1","idx2","node","heapifyDown","heapifyUp","smallerChildIndex","getAdjNodes","H","W","x","y","nodes","dir","newX","newY","addToGraph","neighbors","neighbor","Dijkstra","graph","cellId","buildAdjList","visited","Set","src","tar","distance","pq","offset","Infinity","curNode","has","newDistance","prev","unshift","getSP","g","h","calcGCost","startPos","curPos","Math","abs","calcHCost","endPos","found","setParent","parentNode","UpdateGCost","cost","getGCost","getHCost","getFCost","getPos","AStar","row","col","open","close","startNode","startKey","undefined","Maze","controllDisabled","handleMaze","handlePath","parts","newPos","posToId","walls","markPos","frontier","randIndex","floor","random","splice","canBePlaced","getNewPos","getNeighbors","up","down","left","right","count","posId","resetMaze","duration","primesAlgo","solveMaze","disabled","Queen","dimension","handleClick","handleUpdate","board","lsg","cellStyle","rowArray","toString","width","height","moves","len","availablePos","idx","n","every","ele","cellNum","solveNQueens","move","action","reset","Array","fill","animateNQueens","val","value","isNaN","getCellId","onChange","type","min","max","createChessBoard","Bars","arr","handleSort","getNewArray","populateArray","steps","resetAnimation","step","el1","el2","h1","clientHeight","h2","temp","sort","quickSort","animateSort","mergeSort","animateMerge","timeout","unsorted","randNum","w","partition","pivot","pivotIndex","color","QuickSort","array","MergeSort","lo","hi","arr2","mid","merge","Home","menuList","querySelectorAll","App","exact","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f361a954.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n    return (\n      <div className=\"header-container\">\n        <div className=\"title\">\n          <Link to='/' className=\"link hover\">\n            Algorithm Visualizer\n          </Link>\n        </div>\n        <ul className=\"menu-list\">\n          <li>\n            <Link to=\"/dijkstra\" className=\"hover\" id=\"dijkstra\">\n              Dijkstra's Algorithm\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/astar\" className=\"hover\" id=\"astar\">\n              A* Search\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/maze\" className=\"hover\" id=\"maze\">\n              Maze\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/queen\" className=\"hover\" id=\"queen\">\n              N Queens\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/quicksort\" className=\"hover\" id=\"quicksort\">\n              Quick Sort\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/mergesort\" className=\"hover\" id=\"mergesort\">\n              Merge Sort\n            </Link>\n          </li>\n        </ul>\n      </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './grid.css';\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.rows = 25;\n    this.cols = 50;\n    this.startSelected = false;\n    this.endSelected = false;\n    this.lastPos = [0, 0];\n    this.state = {\n      grid: [],\n      start: [10, 8],\n      end: [10, 42],\n      isMousePressed: false,\n    };\n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.handleOutbounds = this.handleOutbounds.bind(this);\n    this.handleTips = this.handleTips.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.setState({ grid: this.createGrid() });\n  }\n\n  createGrid() {\n    let grid = [];\n    let style = \"cell\";\n    let { start, end } = this.state;\n    for (let i = 0; i < this.rows; i++) {\n      grid.push([]);\n      for (let j = 0; j < this.cols; j++) {\n        if (i === start[0] && j === start[1]) style = \"cell start\";\n        else if (i === end[0] && j === end[1]) style = \"cell finish\";\n        else style = \"cell\";\n        grid[i][j] = (\n          <div\n            id={`${i}-${j}`}\n            key={`${i}-${j}`}\n            className={style}\n            onMouseDown={this.handleMouseDown}\n            onMouseUp={this.handleMouseUp}\n            onMouseEnter={this.handleMouseEnter.bind(this, i, j)}\n            onMouseLeave={this.handleMouseLeave.bind(this, i, j)}\n          ></div>\n        );\n      }\n    }\n    return grid;\n  }\n\n  handleMouseDown(e) {\n    e.preventDefault();\n\n    let pos = e.currentTarget.id.split(\"-\");\n    if (\n      parseInt(pos[0]) === this.state.start[0] &&\n      parseInt(pos[1]) === this.state.start[1]\n    ) {\n      this.lastPos = this.parseIdToPos(e.currentTarget.id);\n      this.startSelected = true;\n    } else {\n      this.startSelected = false;\n    }\n\n    if (\n      parseInt(pos[0]) === this.state.end[0] &&\n      parseInt(pos[1]) === this.state.end[1]\n    ) {\n      this.lastPos = this.parseIdToPos(e.currentTarget.id);\n      this.endSelected = true;\n    } else {\n      this.endSelected = false;\n    }\n\n    this.setState({ isMousePressed: true });\n  }\n\n  handleMouseEnter(i, j) {\n    if (!this.state.isMousePressed) return;\n    let cell = document.getElementById(`${i}-${j}`);\n    if (!this.startSelected && !this.endSelected) {\n        \n    } else {\n      if (!this.isStartOrEnd([i, j])) {\n        this.lastPos = [i, j];\n        if (this.startSelected)\n          cell.classList.add('start');\n        else cell.classList.add(\"finish\");\n      }\n    }\n  }\n\n  handleMouseLeave(i, j) {\n    if (!this.state.isMousePressed) return;\n\n    let cell = document.getElementById(`${i}-${j}`);\n    if (!this.startSelected && !this.endSelected) {\n        if (cell.id !== this.getStartElement().id && cell.id !== this.getEndElement().id) {\n            if (cell.classList.contains(\"wall\")) cell.classList.remove(\"wall\");\n            else cell.classList.add(\"wall\");\n        }\n    } else {\n      if (this.startSelected) {\n        document.getElementById(`${i}-${j}`).classList.remove(\"start\");\n      }\n      else {\n        document.getElementById(`${i}-${j}`).classList.remove(\"finish\");\n      } \n      this.lastPos = [i, j];\n    }\n  }\n\n  handleMouseUp(e) {\n    e.preventDefault();\n    let pos = this.parseIdToPos(e.currentTarget.id);\n\n    if (!this.isStartOrEnd(pos)) {\n      if (this.startSelected) {\n        document.getElementById(e.currentTarget.id).classList.add(\"start\");\n        this.setState({\n          isMousePressed: false,\n          start: this.parseIdToPos(e.currentTarget.id),\n        });\n      } else if (this.endSelected) {\n        document.getElementById(e.currentTarget.id).classList.add(\"finish\");\n        this.setState({\n          isMousePressed: false,\n          end: this.parseIdToPos(e.currentTarget.id),\n        });\n      } else {\n        let cell = document.getElementById(e.currentTarget.id);\n        if (cell.classList.contains(\"wall\")) cell.classList.remove(\"wall\");\n        else if (!this.isStartOrEnd(pos)) {\n          cell.classList.add(\"wall\");\n        }\n        this.setState({ isMousePressed: false });\n      }\n    } else {\n      if (this.startSelected) {\n        document.getElementById(this.parsePosToId(this.lastPos)).classList.add('start');\n        this.setState({\n          isMousePressed: false,\n          start: this.lastPos\n        });\n      } else if (this.endSelected) {\n        document.getElementById(this.parsePosToId(this.lastPos)).classList.add('finish');\n        this.setState({\n          isMousePressed: false,\n          end: this.lastPos\n        });\n      }\n    }\n  }\n\n  isStartOrEnd(pos) {\n    if (pos[0] === this.state.start[0] && pos[1] === this.state.start[1]) return true;\n    if (pos[0] === this.state.end[0] && pos[1] === this.state.end[1]) return true;\n    return false;\n  }\n\n  parseIdToPos(id) {\n    let pos = id.split(\"-\");\n    return pos.map((el) => parseInt(el));\n  }\n\n  parsePosToId(pos) {\n    return `${pos[0]}-${pos[1]}`;\n  }\n\n  getStartElement() {\n    return document.getElementById(\n      `${this.state.start[0]}-${this.state.start[1]}`\n    );\n  }\n\n  getEndElement() {\n    return document.getElementById(\n      `${this.state.end[0]}-${this.state.end[1]}`\n    );\n  }\n\n  disableEvents() {\n    document.querySelector('.grid-content').classList.add('disable');\n    document.querySelector('.menu-list').classList.add('disable');\n    document.querySelector('.title').classList.add('disable');\n  }\n\n  enableEvents() {\n    document.querySelector('.grid-content').classList.remove('disable');\n    document.querySelector('.menu-list').classList.remove('disable');\n    document.querySelector('.title').classList.remove('disable');\n  }\n\n  animate() {\n    this.disableEvents();\n    this.clearGraph();\n    let { grid, start, end } = this.state;\n\n    if (this.props.algoType === \"dijkstra\") {\n        let res = this.props.dijkstraSearch(\n          start,\n          end,\n          grid.length,\n          grid[0].length\n        );\n        \n        if (res === null) {\n          alert('No path found');\n          this.enableEvents();\n        } else {\n          let { time, shortestPath } = res;\n          setTimeout(() => {\n            for (let i = 0; i < shortestPath.length; i++) {\n              document.getElementById(shortestPath[i]).classList.add('path');\n            }\n            this.enableEvents();\n          }, time)\n        }\n    } else if (this.props.algoType === \"aStar\") {\n      let path = this.props.aStarSearch(\n        start,\n        end,\n        grid.length,\n        grid[0].length)\n\n        if (path.length === 0) {\n          alert('No path found');\n          this.enableEvents();\n        } else {\n          let time = path.pop();\n          setTimeout(() => {\n            for (let i = 0; i < path.length; i++) {\n              document.getElementById(this.parsePosToId(path[i])).classList.add('path');\n            }\n            this.enableEvents();\n          }, time + 1000);\n        }\n    }\n  }\n\n  clearGraph() {\n    for (let i = 0; i < this.state.grid.length; i++) {\n      for (let j = 0; j < this.state.grid[0].length; j++) {\n        document.getElementById(`${i}-${j}`).classList.remove(\"visit\");\n        document.getElementById(`${i}-${j}`).classList.remove(\"path\");\n      }\n    }\n  }\n\n  handleReset(e) {\n    e.preventDefault();\n    for (let i = 0; i < this.state.grid.length; i++) {\n      for (let j = 0; j < this.state.grid[0].length; j++) {\n        document.getElementById(`${i}-${j}`).classList.remove(\"visit\");\n        document.getElementById(`${i}-${j}`).classList.remove(\"wall\");\n        document.getElementById(`${i}-${j}`).classList.remove(\"path\");\n        document.getElementById(`${i}-${j}`).classList.remove(\"start\");\n        document.getElementById(`${i}-${j}`).classList.remove(\"finish\");\n      }\n    }\n\n      this.setState({\n          start: [10, 8],\n          end: [10, 42]\n      }, () => {\n          this.getStartElement().classList.add(\"start\");\n          this.getEndElement().classList.add(\"finish\");\n      })\n  }\n\n  handleOutbounds(e) {\n    e.preventDefault();\n    if (!this.state.isMousePressed) return;\n\n    if (this.startSelected) {\n      document.getElementById(this.parsePosToId(this.lastPos)).classList.add('start');\n      this.startSelected = false;\n      this.setState({ isMousePressed: false, start: this.lastPos });\n    } else if (this.endSelected) {\n      document.getElementById(this.parsePosToId(this.lastPos)).classList.add('finish');\n      this.endSelected = false;\n      this.setState({ isMousePressed: false, end: this.lastPos });\n    }\n  }\n\n  handleTips() {\n    let tipsModal = document.querySelector('.tips');\n    let closeBtn = document.getElementById('close-btn');\n    tipsModal.style.display = 'block';\n\n    closeBtn.onclick = () => {\n      tipsModal.style.display = 'none';\n    }\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"grid-content\">\n        <div className=\"controlls\">\n          <button className=\"start-btn hover\" onClick={() => this.animate()}>\n            Start\n          </button>\n          <button className=\"reset-btn hover\" onClick={this.handleReset}>\n            Reset\n          </button>\n          <button className=\"tips-btn hover\" onClick={this.handleTips}>\n            Tips\n          </button>\n        </div>\n        <div className=\"tips\" id=\"tips\">\n          <button className=\"close-btn hover\" id=\"close-btn\">\n            X\n          </button>\n          <div className=\"pointers\">\n            <p>Drag star to change the starting vertex. </p>\n            <p>Drag flag to change the ending vertex. </p>\n            <p>Press down on empty spaces to creat walls.</p>\n          </div>\n          <div className=\"tips-content\"></div>\n        </div>\n        <div className=\"gcp\">\n          <div className=\"grid-container\" onMouseLeave={this.handleOutbounds}>\n            {this.state.grid}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Grid;","export function PriorityQueue() {\n    this.items = [];\n    this.size = 0;\n}\n\nPriorityQueue.prototype.getLeftChildIndex = function(parentIndex) {\n    return 2 * parentIndex + 1;\n}\n\nPriorityQueue.prototype.getRightChildIndex = function(parentIndex) {\n  return 2 * parentIndex + 2;\n};\n\nPriorityQueue.prototype.getParentIndex = function(childIndex) {\n  return (childIndex - 1) >> 1;\n};\n\nPriorityQueue.prototype.hasLeftChild = function(index) {\n    return this.getLeftChildIndex(index) < this.size;\n}\n\nPriorityQueue.prototype.hasRightChild = function(index) {\n    return this.getRightChildIndex(index) < this.size;\n}\n\nPriorityQueue.prototype.hasParent = function(index) {\n    return this.getParentIndex(index) >= 0;\n}\n\nPriorityQueue.prototype.leftChild = function(index) {\n    return this.items[this.getLeftChildIndex(index)];\n}\n\nPriorityQueue.prototype.rightChild = function (index) {\n  return this.items[this.getRightChildIndex(index)];\n};\n\nPriorityQueue.prototype.parent = function(index) {\n    return this.items[this.getParentIndex(index)];\n}\n\nPriorityQueue.prototype.swap = function(idx1, idx2) {\n    [this.items[idx1], this.items[idx2]] = [this.items[idx2], this.items[idx1]];\n}\n\nPriorityQueue.prototype.remove = function() {\n    if (this.size === 0) return null;\n    let node = this.items[0];\n    this.items[0] = this.items[this.size - 1];\n    this.heapifyDown();\n    this.size--;\n    return node;\n}\n\nPriorityQueue.prototype.add = function(node) {\n    this.items[this.size] = node;\n    this.size++;\n    this.heapifyUp();\n}\n\nPriorityQueue.prototype.size = function() {\n    return this.size;\n}\n\nPriorityQueue.prototype.heapifyUp = function () {\n    let index = this.size - 1;\n    while (this.hasParent(index) && this.parent(index).d > this.items[index].d) {\n        this.swap(index, this.getParentIndex(index));\n        index = this.getParentIndex(index);\n    }\n}\n\nPriorityQueue.prototype.heapifyDown = function() {\n    let index = 0;\n    while (this.hasLeftChild(index)) {\n        let smallerChildIndex = this.getLeftChildIndex(index);\n        if (this.hasRightChild(index) && this.rightChild(index).d < this.leftChild(index).d) {\n            smallerChildIndex = this.getRightChildIndex(index);\n        }\n\n        if (this.items[index] < this.items[smallerChildIndex]) break;\n        this.swap(index, smallerChildIndex);\n        index = smallerChildIndex;\n    }\n}\n\nexport function Node(k, d) {\n    this.k = k;\n    this.d = d;\n}\n\nexport const buildAdjList = (rows, cols) => {\n    let graph = {};\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            let cellId = `${i}-${j}`;\n            let cell = document.getElementById(cellId);\n            \n            if (cell.classList.contains('wall')) continue;\n\n            graph[cellId] = {};\n            addToGraph(graph[cellId], getAdjNodes([i, j], rows, cols))\n        }\n    }\n    return graph;\n  }\n\n  export const getSP = (path, src, tar) => {\n      let prev = tar;\n      let shortestPath = [];\n\n      while (prev !== src) {\n        shortestPath.unshift(prev);\n        prev = path[prev].k;\n      }\n      shortestPath.unshift(src);\n\n      return shortestPath;\n  }\n\nexport const getAdjNodes = (pos, H, W) => {\n\n    const dirs = [\n        [-1, 0],\n        [0, 1],\n        // [-1, 1],\n        // [1, 1],\n        // [1, -1],\n        [1, 0],\n        // [-1, -1],\n        [0, -1],\n    ]\n\n    let [x, y] = pos;\n    let nodes = [];\n\n    for (let dir of dirs) {\n        let [dx, dy] = dir;\n        let newX = dx + x;\n        let newY = dy + y;\n\n        if (newX >= 0 && newX < H && newY >= 0 && newY < W) {\n            if (!document.getElementById(`${newX}-${newY}`).classList.contains('wall'))\n                nodes.push([newX, newY]);\n        }\n    }\n    return nodes;\n}\n\nconst addToGraph = (node, neighbors) => {\n    for (let neighbor of neighbors) {\n        let [x, y] = neighbor;\n        let key = x + '-' + y;\n        node[key] = 1;\n    }\n}\n","import React from 'react';\nimport Grid from '../grid/grid';\nimport './graph.css'\nimport { buildAdjList, getSP, PriorityQueue, Node } from \"./util\";\n\nclass Dijkstra extends React.Component {\n\n    componentDidMount() {\n        document.getElementById('dijkstra').classList.add('active');\n        document.getElementById(\"astar\").classList.remove(\"active\");\n        document.getElementById(\"maze\").classList.remove(\"active\");\n        document.getElementById('queen').classList.remove('active');\n        document.getElementById('quicksort').classList.remove('active');\n        document.getElementById('mergesort').classList.remove('active');\n    }\n\n  dijkstraSearch(start, end, rows, cols) {\n    let graph = buildAdjList(rows, cols);\n    let visited = new Set();\n    let src = `${start[0]}-${start[1]}`;\n    let tar = `${end[0]}-${end[1]}`;\n    let distance = {};\n    let path = {};\n    let pq = new PriorityQueue();\n    let offset = 1;\n    let time = 0;\n\n    for (let node in graph) {\n        distance[node] = Infinity;\n    }\n\n    distance[src] = 0;\n    pq.add(new Node(src, 0));\n \n    while (!visited.has(tar)) {\n        if (pq.size === 0) {\n          return null;\n        }\n        let curNode = pq.remove();\n        if (visited.has(curNode.k)) {\n            continue;\n        }\n        visited.add(curNode.k);\n\n        setTimeout(() => {\n            document.getElementById(`${curNode.k}`).classList.add(\"visit\");\n        }, 10 * offset);\n        offset++;\n\n        let neighbors = graph[curNode.k];\n        for (let neighbor in neighbors) {\n\n            let newDistance = neighbors[neighbor] + distance[curNode.k];\n\n            if (newDistance < distance[neighbor]) {\n                distance[neighbor] = newDistance;\n                path[neighbor] = curNode;\n            }\n            if (!visited.has(neighbor)) {\n              pq.add(new Node(neighbor, distance[neighbor]));\n            }\n        }\n    }\n        time = offset * 10 + 1500;\n        let shortestPath = getSP(path, src, tar); \n        return { time, shortestPath };\n  }\n\n  render() {\n    return (\n      <div className=\"graph-box\">\n        <Grid algoType=\"dijkstra\" dijkstraSearch={this.dijkstraSearch}/>\n      </div>\n    );\n  }\n}\n\nexport default Dijkstra;","export function Node(pos, g, h) {\n    this.x = pos[0];\n    this.y = pos[1];\n    this.g = g; //G cost = distance from starting node\n    this.h = h; //H cost (heuristic) = distance from end node\n    this.d = this.g + this.h; //F cost = G + H\n    this.parent = null;\n}\n\nNode.prototype.setParent = function(parentNode) {\n    this.parent = parentNode;\n}\n\nNode.prototype.UpdateGCost = function(cost) {\n    this.g = cost;\n    this.d = this.g + this.h;\n}\n\nNode.prototype.getGCost = function() {\n    return this.g;\n}\n\nNode.prototype.getHCost = function() {\n    return this.h;\n}\n\nNode.prototype.getFCost = function() {\n    return this.d;\n}\n\nNode.prototype.getPos = function() {\n    return [this.x, this.y];\n}\n\nexport function calcGCost(startPos, curPos) {\n    return Math.abs(startPos[0] - curPos[0]) * 10 + Math.abs(startPos[1] - curPos[1]) * 10;\n}\n\nexport function calcHCost(curPos, endPos) {\n    return Math.abs(endPos[0] - curPos[0]) * 10 + Math.abs(endPos[1] - curPos[1]) * 10;\n}\n\nexport function found(pos, end) {\n    return pos[0] === end[0] && pos[1] === end[1];\n}","import React from 'react';\nimport Grid from \"../grid/grid\";\nimport \"./graph.css\";\nimport { Node, calcGCost, calcHCost, found } from './aStar_util';\nimport { PriorityQueue, getAdjNodes } from './util';\n\nclass AStar extends React.Component {\n\n  componentDidMount() {\n    document.getElementById(\"astar\").classList.add(\"active\");\n    document.getElementById(\"dijkstra\").classList.remove(\"active\");\n    document.getElementById(\"maze\").classList.remove(\"active\");\n    document.getElementById('queen').classList.remove('active');\n    document.getElementById('quicksort').classList.remove('active');\n    document.getElementById('mergesort').classList.remove('active');\n  }\n\n  aStarSearch(start, end, row, col) {\n    let pq = new PriorityQueue();\n    let open = {};\n    let close = new Set();\n    let curPos = start;\n    let g = 0;\n    let h = calcHCost(start, end);\n    let offset = 1;\n    let path = [];\n    let startNode = new Node(start, g, h);\n    let startKey = `${start[0]-start[1]}`;\n    pq.add(startNode);\n    open[startKey] = startNode;\n\n    while (pq.size !== 0) {\n      let curNode = pq.remove();\n      curPos = curNode.getPos();\n      let key = `${curPos[0]}-${curPos[1]}`;\n      close.add(key);\n\n      setTimeout(() => {\n        document.getElementById(`${key}`).classList.add(\"visit\");\n      }, offset);\n      offset++;\n\n      if (found(curPos, end)) {\n        let prev = curNode;\n        while (prev.parent !== null) {\n          path.unshift(prev.getPos());\n          prev = prev.parent;\n        }\n        path.unshift(start);\n        path.push(offset);\n        return path;\n      }\n  \n      let neighbors = getAdjNodes(curPos, row, col);\n      for (let neighbor of neighbors) {\n        let k = `${neighbor[0]}-${neighbor[1]}`;\n        if (close.has(k)) continue;\n\n        g = calcGCost(start, neighbor);\n        h = calcHCost(neighbor, end);\n        let node = new Node(neighbor, g, h);\n        if (open[k] === undefined) pq.add(node);\n        open[k] = node;\n        node.setParent(curNode);\n        \n        open[key] = node;\n        \n      }\n    }\n    return [];\n  }\n\n    render() {\n        return (\n          <div className=\"graph-box\">\n            <Grid algoType=\"aStar\" aStarSearch={this.aStarSearch}/>\n          </div>\n        );\n    }\n}\n\nexport default AStar;","import React from 'react';\nimport './maze.css';\nimport { Node, calcGCost, calcHCost, found } from './aStar_util';\nimport { PriorityQueue } from './util';\n\nclass Maze extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.rows = 35;\n        this.cols = 65;\n        this.state = {\n            controllDisabled: false\n        }\n\n        this.handleMaze = this.handleMaze.bind(this);\n        this.handlePath = this.handlePath.bind(this);\n    }\n\n    componentDidMount() {\n        document.getElementById('maze').classList.add('active');\n        document.getElementById('dijkstra').classList.remove('active');\n        document.getElementById(\"astar\").classList.remove(\"active\");\n        document.getElementById('queen').classList.remove('active');\n        document.getElementById('quicksort').classList.remove('active');\n        document.getElementById('mergesort').classList.remove('active');\n    }\n\n    posToId(pos) {\n        return `${pos[0]}-${pos[1]}`;\n    }\n\n    idToPos(id) {\n        let parts = id.split('-');\n        return [parseInt(parts[0]), parseInt(parts[1])];\n    }\n\n    getNeighbors(pos, visited) {\n        const dirs = [\n            [-1, 0],\n            [0, 1],\n            [1, 0],\n            [0, -1],\n        ]\n\n        let [x, y] = pos;\n        let nodes = [];\n\n        for (let dir of dirs) {\n            let [dx, dy] = dir;\n            let newX = dx + x;\n            let newY = dy + y;\n            let newPos = [newX, newY];\n            if (newX >= 0 && newX < this.rows && newY >= 0 && newY < this.cols) {\n                if (!visited.has(this.posToId(newPos))) {\n                    nodes.push(newPos);\n                }\n            }\n        }\n        return nodes;\n    }\n\n    primesAlgo() {\n        let start = [0, 0];\n        let visited = new Set();\n        let walls = new Set();\n        this.markPos([0, 0]);\n        let frontier = [[0, 1], [1, 0]];\n        let offset = 1;\n        visited.add(this.posToId(start));\n   \n        for (let node of frontier) {\n            walls.add(this.posToId(node));\n        }\n\n        while (frontier.length !== 0) {\n            let randIndex = Math.floor(Math.random() * frontier.length);\n            let curPos = frontier[randIndex];\n            frontier.splice(randIndex, 1);\n\n            if (!this.canBePlaced(curPos, visited)) continue;\n\n            let newPos = this.getNewPos(curPos, visited);\n            visited.add(this.posToId(curPos));\n            visited.add(this.posToId(newPos));\n\n            setTimeout(() => {\n                this.markPos(curPos);\n                this.markPos(newPos);\n            }, 20 * offset)\n            offset++;\n  \n            let neighbors = this.getNeighbors(newPos, visited);\n            for (let neighbor of neighbors) {\n                if (!walls.has(this.posToId(neighbor))) {\n                    walls.add(this.posToId(neighbor));\n                    frontier.push(neighbor);\n                }\n            }\n        }\n        return offset * 20;\n    }\n\n    canBePlaced(pos, visited) {\n        let up = [pos[0] - 1, pos[1]];\n        let down = [pos[0] + 1, pos[1]];\n        let left = [pos[0], pos[1] - 1];\n        let right = [pos[0], pos[1] + 1];\n\n        let count = 0;\n        if (visited.has(this.posToId(up))) count++;\n        if (visited.has(this.posToId(down))) count++;\n        if (visited.has(this.posToId(left))) count++;\n        if (visited.has(this.posToId(right))) count++;\n\n        return count < 2;\n    }\n\n    markPos(pos) {\n        let posId = this.posToId(pos)\n        document.getElementById(posId).classList.add('hollow');\n    }\n\n    getNewPos(pos, visited) {\n\n        let up = [pos[0] - 1, pos[1]];\n        let down = [pos[0] + 1, pos[1]];\n        let left = [pos[0], pos[1] - 1];\n        let right = [pos[0], pos[1] + 1];\n\n        if (visited.has(this.posToId(up))) {\n            return down;\n        } else if (visited.has(this.posToId(down))) {\n            return up;\n        } else if (visited.has(this.posToId(left))) {\n            return right;\n        } else if (visited.has(this.posToId(right))) {\n            return left;\n        }\n    }\n\n    resetMaze() {\n        for (let i = 0; i < this.rows; i++) {\n            for (let j = 0; j < this.cols; j++) {\n                document.getElementById(`${i}-${j}`).classList.remove('hollow');\n                document.getElementById(`${i}-${j}`).classList.remove('maze-path');\n            }\n        }\n    }\n\n    solveMaze(start = [0, 0], end = [this.rows - 1, this.cols - 1], row = this.rows, col = this.cols) {\n        let pq = new PriorityQueue();\n        let open = {};\n        let close = new Set();\n        let curPos = start;\n        let g = 0;\n        let h = calcHCost(start, end);\n        let path = [];\n        let startNode = new Node(start, g, h);\n        let startKey = `${start[0] - start[1]}`;\n        pq.add(startNode);\n        open[startKey] = startNode;\n    \n        while (pq.size !== 0) {\n            let curNode = pq.remove();\n            curPos = curNode.getPos();\n            let key = `${curPos[0]}-${curPos[1]}`;\n            close.add(key);\n\n            if (found(curPos, end)) {\n                let prev = curNode;\n                while (prev.parent !== null) {\n                    path.unshift(prev.getPos());\n                    prev = prev.parent;\n                }\n                path.unshift(start);\n                return path;\n            }\n\n            let neighbors = this.getAdjNodes(curPos, row, col);\n            for (let neighbor of neighbors) {\n                let k = `${neighbor[0]}-${neighbor[1]}`;\n                if (close.has(k)) continue;\n\n                g = calcGCost(start, neighbor);\n                h = calcHCost(neighbor, end);\n                let node = new Node(neighbor, g, h);\n                if (open[k] === undefined) pq.add(node);\n                open[k] = node;\n                node.setParent(curNode);\n                open[key] = node;\n            }\n        }\n    }\n\n    handleMaze(e) {\n        e.preventDefault();\n        this.resetMaze();\n        let duration = this.primesAlgo() + 500;\n        document.querySelector('.menu-list').classList.add('disable');\n        document.querySelector('.title').classList.add('disable');\n        this.setState({ controllDisabled: true });\n        setTimeout(() => {\n            this.setState({ controllDisabled: false });\n            document.querySelector('.menu-list').classList.remove('disable');\n            document.querySelector('.title').classList.remove('disable');\n        }, duration);\n    }\n\n    handlePath(e) {\n        e.preventDefault();\n        let start = document.getElementById(this.posToId([0, 0]));\n        if (!start || !start.classList.contains('hollow')) return;\n        let path = this.solveMaze();\n        for (let cell of path) {\n            document.getElementById(this.posToId(cell)).classList.add('maze-path');\n        }\n    }\n\n    createGrid() {\n        let grid = [];\n        for (let i = 0; i < this.rows; i++) {\n            grid.push([]);\n            for (let j = 0; j < this.cols; j++) {\n                grid[i][j] = (\n                    <div\n                        id={`${i}-${j}`}\n                        key={`${i}-${j}`}\n                        className=\"solid\"\n                    >\n                    </div>\n                );\n            }\n        }\n        return grid;\n    }\n\n    getAdjNodes(pos, H, W) {\n        const dirs = [\n            [-1, 0],\n            [0, 1],\n            [1, 0],\n            [0, -1],\n        ]\n\n        let [x, y] = pos;\n        let nodes = [];\n\n        for (let dir of dirs) {\n            let [dx, dy] = dir;\n            let newX = dx + x;\n            let newY = dy + y;\n\n            if (newX >= 0 && newX < H && newY >= 0 && newY < W) {\n                if (document.getElementById(`${newX}-${newY}`).classList.contains('hollow')) {\n                    nodes.push([newX, newY]);\n                }    \n            }\n        }\n        return nodes;\n    }\n\n    render() {\n        return (\n            <div className=\"maze-container\">\n                <div className=\"maze-controll\">\n                    <button\n                        className=\"create-maze-btn\"\n                        disabled={this.state.controllDisabled}\n                        onClick={this.handleMaze}>\n                        Create Maze\n                    </button>\n                    <button \n                        disabled={this.state.controllDisabled}\n                        onClick={this.handlePath} \n                        className=\"show-path-btn\">\n                            Show Path\n                        </button>\n                </div>\n                <div className=\"maze-grid\">\n                    {this.createGrid()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Maze;","import React from 'react';\nimport './queen.css';\n\nclass Queen extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.dimension = 600;\n        this.state = {\n            row: 8,\n            col: 8,\n            controllDisabled: false\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n    }\n\n    componentDidMount() {\n        document.getElementById('queen').classList.add('active');\n        document.getElementById('maze').classList.remove('active');\n        document.getElementById('dijkstra').classList.remove('active');\n        document.getElementById(\"astar\").classList.remove(\"active\");\n        document.getElementById('quicksort').classList.remove('active');\n        document.getElementById('mergesort').classList.remove('active');\n    }\n\n    createChessBoard() {\n        let board = [];\n        let { row, col } = this.state;\n        const size = Math.floor(this.dimension / row - 1) + 'px';\n        let lsg = false;\n        let cellStyle = '';\n        for (let i = 0; i < row; i++) {\n            let rowArray = [];\n            if (this.state.row % 2 === 0) lsg = !lsg\n            for (let j = 0; j < col; j++) {\n                if (lsg) cellStyle = 'cell-i';\n                else cellStyle = 'cell-j';\n                lsg = !lsg;\n                let id = i * row + j;\n                rowArray.push(\n                    <div\n                        key={id}\n                        id={id.toString()}\n                        className={`chess-cell ${cellStyle}`}\n                        style={{ width: size, height: size }}>\n                    </div>\n                )\n            }\n            board.push(rowArray);\n        }\n        return board;\n    }\n\n    getCellId(row, col) {\n        return (row * this.state.row + col).toString();\n    }\n\n    solveNQueens(res, row, moves) {\n        let len = res.length;\n        if (row === len) {\n            return true;\n        }\n\n        let availablePos = [];\n        for (let i = 0; i < this.state.row; i++) {\n            availablePos[i] = true;\n        }\n        \n        let offset = 0;\n        let idx = 0;\n        for (let n of res) {\n            if (n === -1) break;\n            availablePos[n] = false;\n            offset = row - idx;\n            if (n + offset < len) availablePos[n + offset] = false;\n            if (n - offset >= 0) availablePos[n - offset] = false;\n            idx++;\n        }\n    \n        if (availablePos.every(ele => ele === false)) return;\n        for (let i = 0; i < availablePos.length; i++) {\n            if (!availablePos[i]) continue;\n            let cellNum = row * this.state.row + i;\n            res[row] = i;\n            moves.push([cellNum, 'place'])\n            if (this.solveNQueens(res, row + 1, moves)) return true;\n            res[row] = -1;\n            moves.push([cellNum, 'remove'])\n        }\n    }\n\n    animateNQueens(moves) {\n        let time = 1;\n        for (let move of moves) {\n            let cellId = move[0].toString();\n            let action = move[1];\n            setTimeout(() => {\n                if (action === 'place') {\n                    document.getElementById(cellId).classList.add('queen');\n                } else {\n                    document.getElementById(cellId).classList.remove('queen');\n                }\n            }, time * 100);\n            time++;\n        }\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n        document.querySelector('.menu-list').classList.add('disable');\n        document.querySelector('.title').classList.add('disable');\n        this.setState({ controllDisabled: true })\n        this.reset()\n        let res = new Array(this.state.row);\n        let moves = [];\n        res.fill(-1);\n        this.solveNQueens(res, 0, moves);\n        this.animateNQueens(moves);\n        let timeout = 100 * moves.length + 500;\n        setTimeout(() => {\n            document.querySelector('.menu-list').classList.remove('disable');\n            document.querySelector('.title').classList.remove('disable');\n            this.setState({ controllDisabled: false });\n        }, timeout);\n    }\n\n    handleUpdate(e) {\n        let val = parseInt(e.currentTarget.value);\n        if (isNaN(val) || val < 4 || val > 23) return;\n\n        this.reset();\n        this.setState({\n            row: val,\n            col: val\n        })\n    }\n\n    reset() {\n        for (let i = 0; i < this.state.row; i++) {\n            for (let j = 0; j < this.state.col; j++) {\n                document.getElementById(this.getCellId(i, j)).classList.remove('queen');\n            }\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"board-container\">\n                <div className=\"nqueens-controll\">\n                    <label>\n                        N=\n                    <input \n                        className=\"input-field\" \n                        onChange={this.handleUpdate} \n                        disabled={this.state.controllDisabled}\n                        value={this.state.col}\n                        type=\"number\"\n                        min=\"4\"\n                        max=\"23\">\n                    </input>\n                    </label>\n                    <button \n                        disabled={this.state.controllDisabled}\n                        className=\"nqueens-btn\" \n                        onClick={this.handleClick}>Solve</button>\n                </div>\n                <div className=\"chess-board\">\n                    {this.createChessBoard()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Queen;","import React from 'react';\nimport './bars.css';\n\nclass Bars extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            arr: [],\n            min: 10,\n            max: 500,\n            size: 250,\n            controllDisabled: false\n        }\n\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n        this.getNewArray = this.getNewArray.bind(this);\n    }\n\n    getNewArray(e) {\n        e.preventDefault();\n        if (this.state.arr.length !== 0) this.populateArray();   \n    }\n\n    resetAnimation() {\n        for (let idx = 0; idx < this.state.arr.length; idx++) {\n            document.getElementById(idx).classList.remove('sorted');\n            document.getElementById(idx).classList.remove('swapped');\n            document.getElementById(idx).classList.add('unsorted');\n        }\n    }\n\n    animateSort(steps) {\n        this.resetAnimation();\n        for (let i = 0; i < steps.length; i++) {    \n            setTimeout(() => {\n                let step = steps[i];\n                let el1 = document.getElementById(step[0]);\n                let el2 = document.getElementById(step[1]);\n\n                setTimeout(() => {\n                    el1.classList.add('swapped');\n                    el2.classList.add('swapped');\n                    let h1 = el1.clientHeight;\n                    let h2 = el2.clientHeight;\n                    let temp = h1;\n                    el1.style.height = `${h2}px`;\n                    el2.style.height = `${temp}px`;\n                }, i * 25 + 30);\n\n                setTimeout(() => {\n                    if (step[2] === 'g') {\n                        el1.classList.add('sorted');\n                        el1.classList.remove('unsorted');\n                    } \n                    el1.classList.remove('swapped');\n                    el2.classList.remove('swapped');\n                }, i * 25 + 70);\n            }, i * 25 + 100);\n        }\n    }\n\n    animateMerge(steps) {\n        this.resetAnimation();\n        for (let i = 0; i < steps.length; i++) {\n            setTimeout(() => {\n                let step = steps[i];\n                let el1 = document.getElementById(step[0]);\n                let color = step[2];\n\n                if (color === 'g') {\n                    el1.style.height = `${step[1]}px`;\n                    el1.classList.add('sorted');\n                    el1.classList.remove('unsorted');\n                }\n\n            }, i * 25 + 100);\n        }\n    }\n\n    handleSort(e) {\n        e.preventDefault();\n        let steps = [];\n        let sort = [...this.state.arr];\n        this.setState({ controllDisabled: true });\n        document.querySelector('.menu-list').classList.add('disable');\n        document.querySelector('.title').classList.add('disable');\n\n        if (this.props.type === 'quicksort') {\n            this.props.quickSort(sort, 0, sort.length - 1, steps);\n            this.animateSort(steps);\n        } else if (this.props.type === 'mergesort') {\n            this.props.mergeSort(sort, 0, sort.length - 1, [...sort], steps);\n            this.animateMerge(steps);\n        }\n        let timeout = this.props.type === 'mergesort' ? 25 : 50;\n        setTimeout(() => {\n            this.setState({ controllDisabled: false, arr: sort })\n            document.querySelector('.menu-list').classList.remove('disable');\n            document.querySelector('.title').classList.remove('disable');\n        }, timeout * steps.length + 500);\n    }\n\n    componentDidMount() {\n        this.populateArray();\n    }\n\n    populateArray(size = this.state.size) {\n        let unsorted = [];\n        let randNum = 23;\n        for (let i = 0; i < size; i++) {\n            randNum = Math.floor(Math.random() * (this.state.max + 100)) + 1;\n            unsorted.push(randNum);\n        }\n        this.resetAnimation();\n        this.setState({ arr: unsorted, size });\n    }\n\n    handleUpdate(e) {\n        this.populateArray(e.currentTarget.value);\n    }\n\n    render() {\n        let w = Math.floor(1200 / this.state.size) + 'px';\n        return (\n            <div className=\"bars-container\">\n                <div className=\"bars-controll\">\n                    <button \n                        disabled={this.state.controllDisabled}\n                        className=\"new-array-btn hover\" \n                        onClick={this.getNewArray}>\n                        New Array\n                    </button>\n                    <button \n                        disabled={this.state.controllDisabled}\n                        className=\"sort-btn hover\" \n                        onClick={this.handleSort}>\n                        Sort\n                    </button>\n                    <label className=\"slider-container\"> Size \n                        <input\n                            disabled={this.state.controllDisabled}\n                            type=\"range\"\n                            id=\"slider\"\n                            onChange={this.handleUpdate}\n                            min={this.state.min}\n                            max={this.state.max}\n                            value={this.state.size}>\n                        </input>\n                    </label>\n                </div>\n                <div className=\"bar-graph\">\n                    {this.state.arr.map((val, idx) => {\n                        let h = val + 'px';\n                        return (\n                            <div \n                                className=\"i-bar unsorted\" \n                                id={idx} \n                                key={idx}\n                                style={{ width: w, height: h }}>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Bars;","export function partition(arr, i, j, steps) {\n    let pivot = arr[j];\n    let pivotIndex = j;\n    j--;\n    while (i <= j) {\n        if (arr[i] > pivot && arr[j] < pivot) {\n            swap(arr, i, j, steps, 'r');\n            i++;\n            j--;\n        } else if (arr[i] <= pivot) i++;\n        else j--;\n    }\n    swap(arr, i, pivotIndex, steps, 'g');\n    return i;\n}\n\nexport function merge(arr, lo, mid, hi, arr2, steps) {\n    let k = lo;\n    let i = lo;\n    let j = mid + 1;\n    while (i <= mid && j <= hi) {\n        steps.push([i, j, 'r']);\n        if (arr2[i] <= arr2[j]) {\n            steps.push([k, arr2[i], 'g']);\n            arr[k++] = arr2[i++];\n        } else {\n            steps.push([k, arr2[j], 'g']);\n            arr[k++] = arr2[j++];\n        }\n    }\n    while (i <= mid) {\n        steps.push([i, i, 'r']);\n        steps.push([k, arr2[i], 'g']);\n        arr[k++] = arr2[i++];\n    }\n    while (j <= hi) {\n        steps.push([j, j, 'r']);\n        steps.push([k, arr2[j], 'g']);\n        arr[k++] = arr2[j++];\n    }\n}\n\nfunction swap(arr, i, j, steps, color) {\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n    steps.push([i, j, color]);\n}","import React from 'react';\nimport Bars from './Bars';\nimport { partition } from './sortUtil';\n\nclass QuickSort extends React.Component {\n\n    componentDidMount() {\n        document.getElementById('quicksort').classList.add('active');\n        document.getElementById('queen').classList.remove('active');\n        document.getElementById('maze').classList.remove('active');\n        document.getElementById('dijkstra').classList.remove('active');\n        document.getElementById(\"astar\").classList.remove(\"active\");\n        document.getElementById('mergesort').classList.remove('active');\n    }\n\n    quickSort(array, i = 0, j = array.length - 1, steps) {\n        if (i >= j) {\n            if (i >= 0 && i < array.length)\n                steps.push([i, i, 'g']);\n            return array;\n        }\n\n        let pivot = partition(array, i, j, steps);\n        \n        this.quickSort(array, i, pivot - 1, steps);\n        this.quickSort(array, pivot + 1, j, steps);\n\n        return array\n    }\n\n    render() {\n        return (\n            <Bars type=\"quicksort\" quickSort={this.quickSort}/>\n        )\n    }\n}\n\nexport default QuickSort;","import React from 'react';\nimport Bars from './Bars';\nimport { merge } from './sortUtil'\n\nclass MergeSort extends React.Component {\n\n    componentDidMount() {\n        document.getElementById('mergesort').classList.add('active');\n        document.getElementById('queen').classList.remove('active');\n        document.getElementById('maze').classList.remove('active');\n        document.getElementById('dijkstra').classList.remove('active');\n        document.getElementById(\"astar\").classList.remove(\"active\");\n        document.getElementById('quicksort').classList.remove('active');\n    }\n\n    mergeSort(arr, lo, hi, arr2, steps) { \n        if (lo === hi) return;\n        let mid = (lo + hi) >> 1;\n        this.mergeSort(arr2, lo, mid, arr, steps);\n        this.mergeSort(arr2, mid + 1, hi, arr, steps);\n        merge(arr, lo, mid, hi, arr2, steps);\n    }\n\n    render() {\n        return (\n            <Bars type=\"mergesort\" mergeSort={this.mergeSort}/>\n        )\n    }\n}\n\nexport default MergeSort;","import React from 'react';\nimport './home.css'\n\nclass Home extends React.Component {\n\n    componentDidMount() {\n        const menuList = document.querySelectorAll(\".menu-list li a\");\n        for (let i = 0; i < menuList.length; i++) {\n            menuList[i].classList.remove('active');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"home-box\">\n                <div className=\"modal-overlay\" id=\"modal-overlay\"></div>\n\n                <div className=\"modal\" id=\"modal\">\n                    <div className=\"modal-guts\">\n                        <h1>About</h1>\n                        <p>Hello, thank you for checking out algorithm visualizer, an app for visualizing different algorithms. \n                            I created this app because I think this is\n                            a great way to solidify my understanding of how different algorithms work.</p>\n                        <p>To get started, click on any of the algorithms from the top menu, and click the start button\n                            to see it in action. \n                        </p>\n                        <p>\n                            Algorithms:\n                            <li>\n                                Dijkstra's - an algorithm for finding the shortest path. \n                            </li>\n                            <li>\n                                A* Algorithm - a more optimal path finding algorithm. Faster than Dijkstra's.\n                            </li>\n                            <li>\n                                Maze - used Prim's algorithm to randomly generate a maze. \n                            </li>\n                            <li>\n                                N Queens - a puzzle for placing N queens (using backtracking) on a NxN board. \n                            </li>\n                            <li>\n                                Merge Sort - a sorting algorithm that uses the divide and conquer approach.\n                            </li>\n                            <li>\n                                Quick Sort - another divide and conquer sorting algorithm.\n                            </li>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Header from './header/Header';\nimport { Route } from 'react-router-dom';\nimport Dijkstra from \"./graph/Dijkstra\";\nimport AStar from './graph/AStar';\nimport Maze from './graph/Maze';\nimport Queen from './queen/Queen';\nimport QuickSort from './sort/QuickSort';\nimport MergeSort from './sort/MergeSort';\nimport Home from './home/Home';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Route exact path=\"/\" component={Home}></Route>\n      <Route exact path=\"/dijkstra\" component={Dijkstra}></Route>\n      <Route exact path=\"/astar\" component={AStar}></Route>\n      <Route exact path=\"/maze\" component={Maze}></Route>\n      <Route exact path=\"/queen\" component={Queen}></Route>\n      <Route exact path=\"/quicksort\" component={QuickSort}></Route>\n      <Route exact path=\"/mergesort\" component={MergeSort}></Route>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}